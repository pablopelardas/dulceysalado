using System;
using System.Collections.Generic;
using DistriCatalogoAPI.Domain.Common;

namespace DistriCatalogoAPI.Domain.Entities
{
    public class CategoryBase : BaseEntity
    {
        public int Id { get; private set; }
        public int CodigoRubro { get; private set; }
        public string Nombre { get; private set; }
        public string Icono { get; private set; }
        public bool Visible { get; private set; }
        public int Orden { get; private set; }
        public string Color { get; private set; }
        public string Descripcion { get; private set; }
        public int CreatedByEmpresaId { get; private set; }

        // Navigation
        public virtual Company CreatedByEmpresa { get; private set; }
        public virtual ICollection<ProductBase> ProductosBases { get; private set; }

        protected CategoryBase()
        {
            ProductosBases = new HashSet<ProductBase>();
        }

        // Constructor para crear categor칤a autom치ticamente desde sync
        public static CategoryBase CreateFromSync(int codigoRubro, int empresaId, string? nombre = null)
        {
            // Validaci칩n removida - permite cualquier c칩digo de rubro

            return new CategoryBase
            {
                CodigoRubro = codigoRubro,
                Nombre = !string.IsNullOrWhiteSpace(nombre) ? nombre : $"Categor칤a {codigoRubro}",
                Icono = "游닍",
                Visible = true,
                Orden = 999 + codigoRubro, // Orden alto para que aparezcan al final
                Color = "#6B7280", // Color gris por defecto
                Descripcion = $"Categor칤a creada autom치ticamente desde sincronizaci칩n para rubro {codigoRubro}",
                CreatedByEmpresaId = empresaId,
                CreatedAt = DateTime.UtcNow,
                UpdatedAt = DateTime.UtcNow
            };
        }

        // Constructor para crear categor칤a manualmente
        public static CategoryBase Create(
            int codigoRubro,
            string nombre,
            string icono,
            bool visible,
            int orden,
            string color,
            string descripcion,
            int empresaId)
        {
            if (codigoRubro <= 0)
                throw new ArgumentException("El c칩digo de rubro debe ser mayor a 0");

            if (string.IsNullOrWhiteSpace(nombre))
                throw new ArgumentException("El nombre de la categor칤a es requerido");

            return new CategoryBase
            {
                CodigoRubro = codigoRubro,
                Nombre = nombre.Trim(),
                Icono = icono,
                Visible = visible,
                Orden = orden,
                Color = color ?? "#6B7280",
                Descripcion = descripcion?.Trim(),
                CreatedByEmpresaId = empresaId,
                CreatedAt = DateTime.UtcNow,
                UpdatedAt = DateTime.UtcNow
            };
        }

        public void Update(
            string nombre,
            string icono,
            bool? visible,
            int? orden,
            string color,
            string descripcion)
        {
            if (!string.IsNullOrWhiteSpace(nombre))
                Nombre = nombre.Trim();

            if (!string.IsNullOrWhiteSpace(icono))
                Icono = icono;

            if (visible.HasValue)
                Visible = visible.Value;

            if (orden.HasValue && orden.Value >= 0)
                Orden = orden.Value;

            if (!string.IsNullOrWhiteSpace(color))
                Color = color;

            if (descripcion != null)
                Descripcion = descripcion.Trim();

            UpdatedAt = DateTime.UtcNow;
        }

        public void ToggleVisibility()
        {
            Visible = !Visible;
            UpdatedAt = DateTime.UtcNow;
        }

        public void UpdateNombreFromSync(string nombre)
        {
            if (!string.IsNullOrWhiteSpace(nombre))
            {
                Nombre = nombre.Trim();
                UpdatedAt = DateTime.UtcNow;
            }
        }

        public bool CanBeDeleted()
        {
            // No permitir eliminar si tiene productos asociados
            return ProductosBases?.Count == 0;
        }

        public bool IsAutoGenerated()
        {
            return Descripcion?.Contains("creada autom치ticamente desde sincronizaci칩n") == true;
        }
    }
}